apiVersion: v1
kind: Namespace
metadata:
  name: flask-server

---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: demo-flask-quota
  namespace: flask-server
spec:
  hard:
    requests.cpu: "1"
    requests.memory: 256Mi
    limits.cpu: "2"
    limits.memory: 512Mi

---
apiVersion: v1
kind: Service
metadata:
  name: demo-flask-svc-1
  namespace: flask-server
  labels:
    app: demo-flask-svc-1
spec:
  type: NodePort
  selector:
    app: flask-app-1
  ports:
    - port: 4001
      targetPort: 5000
      nodePort: 30101
      name: flask-port

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: demo-flask-app-1
  namespace: flask-server
  labels:
    app: flask-app-1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask-app-1
  template:
    metadata:
      labels:
        app: flask-app-1
    spec:
      containers:
        - name: demo-flask-app-1
          image: usman476/demo-flask-app:latest
          env:
            - name: STRESS_APP
              value: "True"
            - name: STRESS_CPU
              value: "0"
            - name: STRESS_VM
              value: "1"
            - name: STRESS_VM_BYTES
              value: "150M"
            - name: STRESS_HDD
              value: "0"
            - name: STRESS_IO
              value: "0"
            - name: STRESS_TIMEOUT
              value: "120s"
            - name: IDLE_TIMEOUT
              value: "60"
            - name: STRESS_INIT_DELAY
              value: "60"
            - name: FLASK_THREADS
              value: "128"

          command: [ "python3" ]
          args: [ "app.py" ]
          #command: [ "flask" ]
          #args: [ "run", "-h", "0.0.0.0", "-p", "5000" ]
          #command: [ "opentelemetry-instrument" ]
          #args: [ "--traces_exporter", "jaeger_thrift", "flask", "run" ]
          resources:
            requests:
              memory: "100Mi"
              cpu: "100m"
            limits:
              memory: "200Mi"
              cpu: "200m"
          imagePullPolicy: "Always"
      restartPolicy: Always
      nodeSelector:
        kubernetes.io/hostname: worker1